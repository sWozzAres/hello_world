[1/10] Building CXX object esp-idf/main/CMakeFiles/__idf_main.dir/Vec.cpp.obj
[2/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\Users\markb\esprepos\hello_world\build\bootloader\esp-idf\esptool_py && C:\Users\markb\.espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/Users/markb/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 C:/Users/markb/esprepos/hello_world/build/bootloader/bootloader.bin"
Bootloader binary size 0x6810 bytes. 0x7f0 bytes (7%) free.
[3/8] Building CXX object esp-idf/main/CMakeFiles/__idf_main.dir/hello_world_main.cpp.obj
[4/8] Linking C static library esp-idf\main\libmain.a
[5/8] Generating ld/sections.ld
[6/8] Linking CXX executable hello_world.elf
[7/8] Generating binary image from built executable
esptool.py v4.7.dev1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated C:/Users/markb/esprepos/hello_world/build/hello_world.bin
[8/8] cmd.exe /C "cd /D C:\Users\markb\esprepos\hello_world\build\esp-idf\esptool_py && C:\Users\markb\.espressif\python_env\idf5.1_py3.11_env\Scripts\python.exe C:/Users/markb/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/Users/markb/esprepos/hello_world/build/partition_table/partition-table.bin C:/Users/markb/esprepos/hello_world/build/hello_world.bin"
hello_world.bin binary size 0x2ad60 bytes. Smallest app partition is 0x100000 bytes. 0xd52a0 bytes (83%) free.
